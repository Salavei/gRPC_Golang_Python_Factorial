// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: factorial.proto

package utils

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FactorialClient is the client API for Factorial service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FactorialClient interface {
	CalculateFactorial(ctx context.Context, in *FactorialRequest, opts ...grpc.CallOption) (*FactorialResponse, error)
}

type factorialClient struct {
	cc grpc.ClientConnInterface
}

func NewFactorialClient(cc grpc.ClientConnInterface) FactorialClient {
	return &factorialClient{cc}
}

func (c *factorialClient) CalculateFactorial(ctx context.Context, in *FactorialRequest, opts ...grpc.CallOption) (*FactorialResponse, error) {
	out := new(FactorialResponse)
	err := c.cc.Invoke(ctx, "/utils.Factorial/CalculateFactorial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FactorialServer is the server API for Factorial service.
// All implementations should embed UnimplementedFactorialServer
// for forward compatibility
type FactorialServer interface {
	CalculateFactorial(context.Context, *FactorialRequest) (*FactorialResponse, error)
}

// UnimplementedFactorialServer should be embedded to have forward compatible implementations.
type UnimplementedFactorialServer struct {
}

func (UnimplementedFactorialServer) CalculateFactorial(context.Context, *FactorialRequest) (*FactorialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFactorial not implemented")
}

// UnsafeFactorialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FactorialServer will
// result in compilation errors.
type UnsafeFactorialServer interface {
	mustEmbedUnimplementedFactorialServer()
}

func RegisterFactorialServer(s grpc.ServiceRegistrar, srv FactorialServer) {
	s.RegisterService(&Factorial_ServiceDesc, srv)
}

func _Factorial_CalculateFactorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FactorialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactorialServer).CalculateFactorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/utils.Factorial/CalculateFactorial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactorialServer).CalculateFactorial(ctx, req.(*FactorialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Factorial_ServiceDesc is the grpc.ServiceDesc for Factorial service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Factorial_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "utils.Factorial",
	HandlerType: (*FactorialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateFactorial",
			Handler:    _Factorial_CalculateFactorial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "factorial.proto",
}
